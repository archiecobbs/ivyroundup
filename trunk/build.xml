<?xml version="1.0" encoding="UTF-8"?>

<!--
    Copyright 2008 Archie L. Cobbs.

    Licensed under the Apache License, Version 2.0 (the "License"); you may
    not use this file except in compliance with the License. You may obtain
    a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations
    under the License.
-->

<!--
    Option targets (execute these before the action targets (like 'repo' or 'resolve') to turn on or off build behaviors):

    use-git: makes svn related operations either use "git svn" or skipped.

    get-xalan: resolve and download xalan, and use the artifacts generated for the xslt operations. Slow but gurantees
    xalan availability. If not specified the build will assume the xalan jars already on ant classpath.
-->

<!-- $Id$ -->
<project name="ivyroundup" default="all" xmlns:ivy="urn:org.apache.ivy.ant">

    <!--
        Set this property to change where the meta-repo is generated.
        You also need '-Dskip-svn=true' if this is set to somewhere outside a subversion working tree.
    -->
    <property name="target.repo" value="${basedir}/repo" />

    <!--
        Define Ivy ant tasks.

        NOTE: /usr/share/java/ivy.jar must be a version of ivy containing
        the builder resolver.
    -->
    <taskdef uri="urn:org.apache.ivy.ant"
      resource="org/apache/ivy/ant/antlib.xml"
      classpath="/usr/share/java/ivy.jar"/>

    <!--
        Configure ivy. The override="true" is a workaround for:
            https://issues.apache.org/jira/browse/IVY-782
    -->
    <ivy:settings id="ivy-settings" override="true" file="src/ivy/build-settings.xml"/>

    <!-- Default target: build the repo and run all checks -->
    <target name="all" depends="clean, repo, resolve" description="Complete build and validity checking"/>

    <!-- Regenerate list all module revisions in XML manifest (repo/modules.xml) -->
    <target name="modules" depends="_init-xalan" description="Regenerate repo/modules.xml">
        <property name="svn-cmd" value="svn" />

        <mkdir dir="${target.repo}"/>

        <!-- Get current SVN revision -->
        <exec outputproperty="svn.revision" executable="/bin/bash" logError="true" failonerror="true">
            <arg value="-c"/>
            <arg value="( ${svn-cmd} info ${basedir} 2>/dev/null 
              | grep -E '^Last Changed Rev:' || echo '0' )
              | sed 's/^Last Changed Rev: //g'"/>
        </exec>

        <!-- Generate list of modules -->
        <exec executable="/bin/bash" logError="true" failonerror="true">
            <arg value="-c"/>
            <arg value="find src/modules -name ivy.xml -print
              | TZ= awk -F/ -v SVNREV=${svn.revision} -f src/awk/xmlify.awk
              > ${target.repo}/modules.xml"/>
        </exec>

        <!-- Create graphs of module dependencies -->
        <mkdir dir="build/graph"/>
        <xslt classpathref="xalan.classpath" style="src/xsl/modgraph.xsl" in="${target.repo}/modules.xml" out="build/graph/modules.dot">
            <param name="node.shape" expression="ellipse"/>
            <param name="graph.rankdir" expression="LR"/>
            <param name="graph.size" expression="8.5,11"/>
        </xslt>
        <mkdir dir="${target.repo}/graph"/>
        <exec executable="/bin/bash" logError="true" failonerror="false">
            <arg value="-c"/>
            <arg value="circo -Tgif -o ${target.repo}/graph/modules.gif build/graph/modules.dot"/>
        </exec>
        <exec executable="/bin/bash" logError="true" failonerror="false">
            <arg value="-c"/>
            <arg value="circo -Tsvg -o ${target.repo}/graph/modules.svg build/graph/modules.dot"/>
        </exec>
    </target>

    <!-- Build the Ivy RoundUp builder repository (no artifacts) -->
    <target name="repo" depends="gen-repo, post-repo-gen-svn-ops" description="Regenerate the repository and apply svn operations." />

    <target name="gen-repo" depends="_init-xalan, modules" description="Regenerate the repository">

        <!-- Wipe repository clean -->
        <delete>
            <fileset dir="${target.repo}">
                <include name="modules/**/ivy.xml"/>
                <include name="modules/**/builder.xml"/>
                <include name="images/**/*"/>
                <include name="xsl/**/*"/>
                <include name="css/**/*"/>
                <include name="xsd/**/*"/>
            </fileset>
        </delete>

        <!-- Copy support files into repository -->
        <copy todir="${target.repo}">
            <fileset dir="src">
                <include name="images/**/*"/>
                <include name="xsl/ivy-doc.xsl"/>
                <include name="xsl/modules.xsl"/>
                <include name="css/ivy-style.css"/>
                <include name="xsd/builder-1.0.xsd"/>
                <include name="xsd/ivy.xsd"/>
            </fileset>
            <dirset dir="src">
                <include name="modules/**/*"/>
            </dirset>
        </copy>

        <!-- Stylesheet for ivy.xml includes hyperlink to SVN browser -->
        <exec outputproperty="svn.path" executable="/bin/bash" logError="true" failonerror="true">
            <arg value="-c"/>
            <arg value="( ${svn-cmd} info ${basedir} 2>/dev/null 
              | grep -E '^URL:' || echo '/unknown' )
              | sed -r 's|^URL: .*/svn(/.*)$$|\1|g'"/>
        </exec>
        <mkdir dir="build/xsl"/>
        <copy file="src/xsl/ivy-repo.xsl" todir="build/xsl">
            <filterset>
                <filter token="SVNROOTPATH" value="${svn.path}"/>
            </filterset>
        </copy>

        <!-- Generate ivy.xml files -->
        <xslt classpathref="xalan.classpath" style="src/xsl/apply-xsl.xsl" in="${target.repo}/modules.xml" out="/dev/null">
            <param name="filename" expression="ivy.xml"/>
            <param name="stylesheet" expression="../../build/xsl/ivy-repo.xsl"/>
            <param name="target.repo" expression="${target.repo}" />
            <param name="source.base" expression="${basedir}/src" />
        </xslt>

        <!-- Generate builder.xml files -->
        <xslt classpathref="xalan.classpath" style="src/xsl/apply-xsl.xsl" in="${target.repo}/modules.xml" out="/dev/null">
            <param name="filename" expression="builder.xml"/>
            <param name="stylesheet" expression="builder-repo.xsl"/>
            <param name="target.repo" expression="${target.repo}" />
            <param name="source.base" expression="${basedir}/src" />
        </xslt>

        <!-- Validate all generated XML files -->
        <xmlvalidate failonerror="true" warn="yes" lenient="no">
            <attribute name="http://xml.org/sax/features/namespaces" value="true"/>
            <attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
            <attribute name="http://apache.org/xml/features/validation/schema-full-checking" value="true"/>
            <fileset dir="${target.repo}/modules">
                <include name="**/ivy.xml"/>
                <include name="**/builder.xml"/>
            </fileset>
        </xmlvalidate>
    </target>

    <target name="post-repo-gen-svn-ops" unless="skip-svn" description="Regenerate the repository">
        <!-- Make sure keyword expansion turned off -->
        <exec executable="svn" logError="true" failonerror="true">
            <arg value="propdel"/>
            <arg value="--quiet"/>
            <arg value="--recursive"/>
            <arg value="svn:keywords"/>
            <arg value="${target.repo}"/>
        </exec>
    </target>

    <!-- Clear the temporary cache -->
    <target name="clear-cache" description="Clear the cache">
        <delete dir="build/cache"/>
        <mkdir dir="build/cache"/>
    </target>

    <!--
        Resolve every artifact into the temporary cache and then
        build a normal repository that includes artifacts.

        You can restrict what gets resolved by defining one or more of:

            ${resolve.org}  - Only resolve when organization matches
            ${resolve.mod}  - Only resolve when module matches
            ${resolve.rev}  - Only resolve when revision matches
    -->
    <target name="resolve" depends="_init-xalan" description="Resolve everything and build a normal repository">

        <!-- Initialize resolve work area and repository we're going to build -->
        <delete dir="build/resolve"/>
        <delete dir="build/repo-with-artifacts"/>
        <mkdir dir="build/resolve"/>
        <mkdir dir="build/repo-with-artifacts"/>

        <!-- Copy the builder repo -->
        <copy todir="build/repo-with-artifacts">
            <fileset dir="${target.repo}"/>
        </copy>

        <!-- Create an ant build that does the resolve and retrieve work -->
        <property name="resolve.org" value=""/>
        <property name="resolve.mod" value=""/>
        <property name="resolve.rev" value=""/>
        <xslt classpathref="xalan.classpath" style="src/xsl/resolve.xsl" in="${target.repo}/modules.xml" out="build/resolve/build.xml">
            <param name="retrieve.pattern" expression="build/repo-with-artifacts/modules/[organisation]/[module]/[revision]/[type]s/[artifact]-[revision].[ext]"/>
            <param name="resolve.org" expression="${resolve.org}"/>
            <param name="resolve.mod" expression="${resolve.mod}"/>
            <param name="resolve.rev" expression="${resolve.rev}"/>
        </xslt>
        <copy file="src/ivy/resolve-settings.xml" todir="build/resolve"/>

        <!-- Run the build -->
        <ant dir="build/resolve"/>
    </target>

    <!-- Clean out all generated files (not including the builder repository under repo/) -->
    <target name="clean" description="Delete build files">
        <delete dir="build"/>
    </target>

    <target name="use-git">
        <property name="svn-cmd" value="git svn" />
        <property name="skip-svn" value="true" />
    </target>

    <target name="get-xalan">
        <property name="download-xalan" value="true" />
    </target>

    <target name="_init-xalan" depends="_download-xalan, _provided-xalan-classpath" />

    <target name="_download-xalan" if="download-xalan">
      <!-- Find xalan -->
      <ivy:resolve revision="2.7+" settingsRef="ivy-settings" type="jar"
        organisation="org.apache.xml" module="xalan-j" inline="true" log="download-only"/>
      <ivy:cachepath pathid="xalan.classpath" settingsRef="ivy-settings" type="jar"
        organisation="org.apache.xml" module="xalan-j" inline="true" log="download-only"/>
    </target>

    <target name="_provided-xalan-classpath" unless="get-xalan">
      <!-- placeholder declaration -->
      <path id="xalan.classpath" path="" />
    </target>
</project>
