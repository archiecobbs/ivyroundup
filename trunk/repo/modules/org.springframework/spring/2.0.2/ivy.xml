<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xsl/ivy-doc.xsl"?>

<!--
    Copyright 2009 Stephen Woods

    Licensed under the Apache License, Version 2.0 (the "License"); you may
    not use this file except in compliance with the License. You may obtain
    a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations
    under the License.
-->
<!-- GENERATED FILE - DO NOT EDIT -->
<!-- Generated by $Id: ivy-repo.xsl 478 2009-02-20 20:36:35Z archie.cobbs $ -->
<ivy-module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0" xsi:noNamespaceSchemaLocation="../../../../xsd/ivy.xsd">

    <info organisation="org.springframework" module="spring" revision="2.0.2" status="release" publication="20070108202100">
        <license name="Apache License, Version 2.0" url="http://www.apache.org/licenses/LICENSE-2.0"/>
        <ivyauthor name="$Id: ivy.xml 594 2009-03-23 12:10:56Z spatialguru.net $" url="http://code.google.com/p/ivyroundup/source/browse/trunk/src/modules/org.springframework/spring/2.0.2/"/>
        <repository pattern="http://ivyroundup.googlecode.com/svn/trunk/repo/modules/[organisation]/[module]/[revision]/ivy.xml" ivys="true" url="http://ivyroundup.googlecode.com/" name="ivyroundup"/>
        <description homepage="http://www.springframework.org/">
            Spring is a layered Java/J2EE application framework, based on code
            published in Expert One-on-One J2EE Design and Development by Rod Johnson
            (Wrox, 2002).

            Spring includes:
            <ul>
                <li>
                    <b>The most complete lightweight container</b>
                    , providing
                    centralized, automated configuration and wiring of your
                    application objects. The container is non-invasive,
                    capable of assembling a complex system from a set of
                    loosely-coupled components (POJOs) in a consistent
                    and transparent fashion. The container brings agility
                    and leverage, and
                    improves application testability and
                    scalability by allowing software components to be first
                    developed and tested in isolation, then scaled up for
                    deployment in any environment (J2SE or J2EE).
                </li>

                <li>
                    <b>A common abstraction layer for transaction management</b>
                    ,
                    allowing for pluggable transaction managers, and making
                    it easy to demarcate transactions without dealing with
                    low-level issues. Generic strategies for JTA and a single
                    JDBC DataSource are included. In contrast to plain JTA
                    or EJB CMT, Spring's transaction support is not tied to
                    J2EE environments.
                </li>

                <li>
                    <b>A JDBC abstraction layer</b>
                    that offers a meaningful
                    exception hierarchy (no more pulling vendor codes out
                    of SQLException), simplifies error handling, and greatly
                    reduces the amount of code you'll need to write. You'll
                    never need to write another finally block to use JDBC
                    again. The JDBC-oriented exceptions comply to Spring's
                    generic DAO exception hierarchy.
                </li>

                <li>
                    <b>Integration with Toplink, Hibernate, JDO, and iBATIS
                        SQL Maps</b>
                    : in terms of resource holders, DAO implementation
                    support, and transaction strategies. First-class Hibernate
                    support with lots of IoC convenience features, addressing
                    many typical Hibernate integration issues. All of these
                    comply to Spring's generic transaction and DAO exception
                    hierarchies.
                </li>

                <li>
                    <b>AOP functionality</b>
                    , fully integrated into Spring
                    configuration management. You can AOP-enable any object
                    managed by Spring, adding aspects such as declarative
                    transaction management. With Spring, you can have
                    declarative transaction management without EJB... even
                    without JTA, if you're using a single database in
                    Tomcat
                    or another web container without JTA support.
                </li>

                <li>
                    <b>A flexible MVC web application framework</b>
                    , built
                    on core Spring functionality. This framework is highly
                    configurable via strategy interfaces, and accommodates
                    multiple view technologies like JSP, Velocity, Tiles,
                    iText, and POI. Note that a Spring middle tier can easily
                    be combined with a web tier based on any other web MVC
                    framework, like
                    Struts, WebWork, or Tapestry.
                </li>
            </ul>

            You can use all of Spring's functionality in any J2EE
            server, and most of it also in non-managed environments. A
            central focus of Spring is to allow for reusable business
            and data access objects that are not tied to specific J2EE
            services. Such objects can be reused across J2EE environments
            (web or
            EJB), standalone applications, test environments,
            etc without any hassle.

            Spring's layered architecture gives you a lot of
            flexibility. All its functionality builds on lower levels. So
            you can e.g. use the JavaBeans configuration management
            without using the MVC framework or AOP support. But if you
            use the web MVC framework or AOP support, you'll find they
            build on the configuration framework, so you can apply your
            knowledge about it immediately.
        </description>
    </info>

    <configurations>
        <conf name="default" description="All standard modules (except for Portlet and Hibernate2 support) with typical dependencies"/>
        <conf name="agent" description="Spring's InstrumentationSavingAgent (for InstrumentationLoadTimeWeaver)"/>
        <conf name="all" description="All standard modules (except for Portlet and Hibernate2 support)"/>
        <conf name="aspects" description="AspectJ aspects, for explicitly linking aspects into an IDE (Eclipse AJDT)"/>
        <conf name="aop" description="AOP framework, source-level metadata support"/>
        <conf name="beans" description="JavaBeans support, bean container"/>
        <conf name="context" description="application context, JNDI support, instrumentation, validation"/>
        <conf name="core" description="core utilities"/>
        <conf name="dao" description="DAO support, transaction infrastructure"/>
        <conf name="hibernate2" description="Hibernate 2.1 support (superseded)"/>
        <conf name="hibernate3" description="Hibernate 3.0/3.1/3.2 support"/>
        <conf name="ibatis" description="iBATIS SQL Maps support"/>
        <conf name="jca" description="JCA 1.0 support"/>
        <conf name="jdbc" description="JDBC support"/>
        <conf name="jdo" description="JDO 1.0/2.0 support"/>
        <conf name="jms" description="JMS 1.0.2/1.1 support"/>
        <conf name="jmx" description="JMX 1.0/1.2 support"/>
        <conf name="jpa" description="JPA 1.0 support"/>
        <conf name="mock" description="JNDI mocks, Servlet API mocks, Portlet API mocks, JUnit support"/>
        <conf name="portlet" description="framework portlets, portlet MVC framework, portlet controllers"/>
        <conf name="remoting" description="remoting support, EJB support"/>
        <conf name="struts" description="Struts support"/>
        <conf name="support" description="UI template support, mail support, scripting, scheduling, caching"/>
        <conf name="tomcat-weaver" description="extension of Tomcat's ClassLoader, capable of class instrumentation"/>
        <conf name="toplink" description="TopLink support"/>
        <conf name="web" description="web application context, multipart resolver, web utilities"/>
        <conf name="webmvc" description="framework servlets, web MVC framework, web controllers, web views"/>
    </configurations>

    <publications>
        <artifact name="spring" type="jar" ext="jar" conf="all"/>
        <artifact name="spring-agent" type="jar" ext="jar" conf="agent"/>
        <artifact name="spring-aspects" type="jar" ext="jar" conf="aspects"/>
        <artifact name="spring-aop" type="jar" ext="jar" conf="aop, remoting, jmx, aspects"/>
        <artifact name="spring-beans" type="jar" ext="jar" conf="beans, context, support, web, struts, portlet, webmvc, jmx, jms, jdbc, jdo, jca, jpa, hibernate2, hibernate3, toplink, ibatis"/>
        <artifact name="spring-context" type="jar" ext="jar" conf="context, support, web, struts, portlet, webmvc"/>
        <artifact name="spring-core" type="jar" ext="jar" conf="core, aop, remoting, dao, beans, context, support, web, struts, portlet, webmvc, jmx, jms, jdbc, jdo, jca, jpa, hibernate2, hibernate3, toplink, ibatis, mock"/>
        <artifact name="spring-dao" type="jar" ext="jar" conf="dao, jms, jca, jdbc, jpa, jdo, hibernate2, hibernate3, toplink, ibatis"/>
        <artifact name="spring-hibernate2" type="jar" ext="jar" conf="hibernate2"/>
        <artifact name="spring-hibernate3" type="jar" ext="jar" conf="hibernate3"/>
        <artifact name="spring-ibatis" type="jar" ext="jar" conf="ibatis"/>
        <artifact name="spring-jca" type="jar" ext="jar" conf="jca"/>
        <artifact name="spring-jdbc" type="jar" ext="jar" conf="jdbc, jpa, jdo, hibernate2, hibernate3, toplink, ibatis"/>
        <artifact name="spring-jdo" type="jar" ext="jar" conf="jdo"/>
        <artifact name="spring-jms" type="jar" ext="jar" conf="jms"/>
        <artifact name="spring-jmx" type="jar" ext="jar" conf="jmx"/>
        <artifact name="spring-jpa" type="jar" ext="jar" conf="jpa"/>
        <artifact name="spring-portlet" type="jar" ext="jar" conf="portlet"/>
        <artifact name="spring-remoting" type="jar" ext="jar" conf="remoting"/>
        <artifact name="spring-struts" type="jar" ext="jar" conf="struts"/>
        <artifact name="spring-support" type="jar" ext="jar" conf="support"/>
        <artifact name="spring-tomcat-weaver" type="jar" ext="jar" conf="tomcat-weaver"/>
        <artifact name="spring-toplink" type="jar" ext="jar" conf="toplink"/>
        <artifact name="spring-web" type="jar" ext="jar" conf="web, struts, portlet, webmvc"/>
        <artifact name="spring-webmvc" type="jar" ext="jar" conf="webmvc"/>
        <artifact name="spring-mock" type="jar" ext="jar" conf="mock"/>
        <artifact name="spring-src" type="source" ext="zip"/>
    </publications>

    <dependencies>
        <dependency conf="default,aop-&gt;default" org="org.aopalliance" name="aopalliance" rev="1.+"/>
        <dependency conf="default,core-&gt;default" org="org.apache.commons" name="commons-logging" rev="1.+"/>
        
        <dependency conf="default,hibernate3-&gt;default" org="org.hibernate" name="hibernate" rev="[3.0,)"/>
        <dependency conf="default,jms-&gt;default" org="javax.jms" name="jms" rev="1.+"/>
        <dependency conf="default,jmx-&gt;default" org="javax.management" name="jmx" rev="[1.2.1,)"/>
        <dependency conf="default,jmx-&gt;default" org="javax.management" name="jmxremote" rev="[1.0.1_04,)"/>
        <!-- 
            TODO: other dependencies
        <dependency org="net.sourceforge.hibernate" name="hibernate" rev="[2.1.7,)" conf="default,hibernate2->???"/>
        <dependency org="org.apache.struts" name="struts" rev="[1.2.9,)" conf="default,struts->???"/>
        -->
    </dependencies>
</ivy-module>
