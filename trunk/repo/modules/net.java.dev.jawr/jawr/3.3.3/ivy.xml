<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../../../xsl/ivy-doc.xsl"?>
<!--
    Copyright 2010 Mark Thomas

    Licensed under the Apache License, Version 2.0 (the "License"); you may
    not use this file except in compliance with the License. You may obtain
    a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations
    under the License.
-->
<!-- GENERATED FILE - DO NOT EDIT -->
<ivy-module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0" xsi:noNamespaceSchemaLocation="../../../../xsd/ivy.xsd">

    <info organisation="net.java.dev.jawr" module="jawr" revision="3.3.3" status="release" publication="20100815094200">
        <license name="Apache License, Version 2.0" url="http://www.apache.org/licenses/LICENSE-2.0"/>
        <ivyauthor xmlns:ivyde="http://ant.apache.org/ivy/ivyde/ns/" name="$Id: ivy.xml 2077 2012-05-23 15:52:39Z archie.cobbs $" url="http://code.google.com/p/ivyroundup/source/browse/trunk/src/modules/net.java.dev.jawr/jawr/3.3.3/"/>
        <repository xmlns:ivyde="http://ant.apache.org/ivy/ivyde/ns/" pattern="http://ivyroundup.googlecode.com/svn/trunk/repo/modules/[organisation]/[module]/[revision]/ivy.xml" ivys="true" url="http://ivyroundup.googlecode.com/" name="ivyroundup"/>
        <description homepage="https://jawr.dev.java.net/">
        <p>
        Jawr is a tunable packaging solution for Javascript and CSS which allows for rapid development
        of resources in separate module files. Developers can work with a large set of split javascript
        files in development mode, then Jawr bundles all together into one or several files in a
        configurable way.
        </p>
        <p>
        By using a tag library, Jawr allows you to use the same, unchanged pages for development and
        production. Jawr also minifies and compresses the files, resulting in reduced page load times. 
        </p>
        <p>
        Jawr is configured using a simple .properties descriptor, and aside of standard java web
        applications it can also be used with Facelets and Grails applications.
        </p>
        <p>
        It is common knowledge that it is faster to serve one large file rather than two smaller ones,
        because of increased HTTP negotiation and the fact that most browsers only keep two connections
        open to the same host at any given time. Jawr will reduce the number of requests needed to load
        a page and the amount of data to transfer to clients, achieving drastic improvement of loading
        times. With a simple configuration file, resources can be distributed in bundles to best suit the
        usage pattern for a site. Files not added to bundles also benefit from minification and compression
        (if no bundles are declared, Jawr will work as an easy to configure resources compressor).
        </p>
        <p>
        A JSP tag library (Facelets also supported) is used to import the resources to pages. In development
        mode, the tags generate <b>script</b> and <b>style</b> links for each resource mapped to a bundle.
        In production mode, the tags generate a single link pointing to the bundle file. Thus, there is no
        need to change code in pages when switching from development to production mode.
        </p>
        <p>
        There is an increasing trend towards richer client interfaces with complex javascript implementations.
        Using Jawr will ease the development process by allowing to distribute modules in separate files without
        worrying about how the application will be served to clients.
        </p>
        <p>
        The alternatives to using Jawr are:<br/>
            <ul>
                <li>
                    Developing all-in-one script files which conform to the deployment scheme. That is, cram
                    all the modules into a few files. Version control becomes unmanageable and it is hard to
                    find a component that needs change. As the project grows, the code becomes near to impossible
                    to mantain.
                </li>
                <li>
                    Use a build script to join and compress the files, which forces developers to build and redeploy
                    the whole application for testing even the slightest of changes in their code.
                </li>
            </ul>
        </p>
        <p>
        Jawr offers the best of both worlds, by combining a powerful bundling-minifying-compressing scheme for
        optimal service in production, with a rapid development mode for quick change-save-test cycles.
        </p>
        </description>
    </info>

    <publications>
        <artifact xmlns:ivyde="http://ant.apache.org/ivy/ivyde/ns/" ivyde:source="jawr"/>
        <artifact type="source" ext="zip"/>
    </publications>

    <dependencies>
        <dependency org="org.apache.log4j" name="log4j" rev="1.2.+" conf="default-&gt;default"/>
    </dependencies>

</ivy-module>
