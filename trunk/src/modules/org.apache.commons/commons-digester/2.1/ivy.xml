<?xml version="1.0" encoding="UTF-8"?>

<!--
    Copyright 2013 Mark Thomas

    Licensed under the Apache License, Version 2.0 (the "License"); you may
    not use this file except in compliance with the License. You may obtain
    a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations
    under the License.
-->

<ivy-module rev="$Id$">

    <info publication="20100924000000">
        <license name="Apache License, Version 2.0" url="http://www.apache.org/licenses/LICENSE-2.0"/>
        <description homepage="http://commons.apache.org/digester/">
            <p>
            Many projects read XML configuration files to provide
            initialization of various Java objects within the
            system. There are several ways of doing this, and the Digester
            component was designed to provide a common implementation
            that can be used in many different projects.
            </p>

            <p>
            Basically, the Digester package lets you configure an XML to
            Java object mapping module, which triggers certain actions
            called rules whenever a particular pattern of nested XML
            elements is recognized. A rich set of predefined rules
            is available for your use, or you can also create your
            own. Advanced features of Digester include:
            <ul>
            <li>Ability to plug in your own pattern matching engine, if
            the standard one is not sufficient for your requirements.</li>
            <li>Optional namespace-aware processing, so that you can define
            rules that are relevant only to a particular XML namespace.</li>
            <li>Encapsulation of Rules into RuleSets that can be easily
            and conveniently reused in more than one application that
            requires the same type of processing.</li>
            </ul>
            </p>
        </description>
    </info>

    <publications>
        <artifact/>
        <artifact type="source" ext="zip"/>
        <artifact type="javadoc" ext="zip"/>
    </publications>

    <dependencies>
        <dependency org="org.apache.commons" name="commons-logging" rev="1.1+" conf="default->default"/>
        <dependency org="org.apache.commons" name="commons-beanutils" rev="[1.7,2.0]" conf="default->core"/>
    </dependencies>

</ivy-module>
