<?xml version="1.0" encoding="UTF-8"?>

<!--
    Copyright 2008 Archie L. Cobbs

    Licensed under the Apache License, Version 2.0 (the "License"); you may
    not use this file except in compliance with the License. You may obtain
    a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations
    under the License.
-->

<ivy-module rev="$Id$">

    <info publication="20090507120000">
        <license name="Oracle Berkeley DB Java Open Source License" url="http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html"/>
        <description homepage="http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/overview/index.html">

        <p>
        Oracle Berkeley DB Java Edition is a open source, embeddable,
        transactional storage engine written entirely in Java. Like Oracle
        Berkeley DB, Oracle Berkeley DB Java Edition executes in the address space
        of the application, without the overhead of client/server communication,
        allowing developers to store and retrieve information quickly, simply
        and reliably. Oracle Berkeley DB Java Edition was designed from the
        ground up in Java. It takes full advantage of the Java environment to
        simplify development and deployment. The architecture of Oracle Berkeley
        DB Java Edition supports very high performance and concurrency for both
        read-intensive and write-intensive workloads.
        </p>

        <p>
        Berkeley DB Java Edition is designed to offer the same benefits of
        Enterprise Java Beans 3.0 (EJB3) persistence without the need to translate
        objects into tables.
        </p>

        <p>
        Relational databases are the most sophisticated tool available to
        the developer for data storage and analysis. Most persisted object
        data is never analyzed using ad-hoc SQL queries; it is usually simply
        retrieved and reconstituted as Java objects. The overhead of using a
        sophisticated analytical storage engine is wasted on this basic task
        of object retrieval. The full analytical power of the relational model
        is not required to efficiently persist Java objects. In many cases,
        it is unnecessary overhead. In contrast, Berkeley DB Java Edition does
        not have the overhead of an ad-hoc query language like SQL, and so does
        not incur this penalty.
        </p>

        <p>
        The result is faster storage, lower CPU and memory requirements, and
        a more efficient development process. Despite the lack of an ad-hoc
        query language, Berkeley DB Java Edition can access Java objects in an
        ad-hoc manner, and it does provide transactional data storage and indexed
        retrieval, as you would expect from any database. The difference is that
        it does this in a small, efficient, and easy-to-manage package. Using
        the Direct Persistence Layer (DPL), Java developers can quickly and
        easily persist and retrieve inter-related groups of Java objects with
        confidence, speed, and a fraction of the complexity and overhead of a
        comparable ORM solution.
        </p>

        <p>
        Berkeley DB Java Edition was designed from the ground up in Java. It
        takes full advantage of the Java environment. The API provides a Java
        Collections-style interface, as well as a programmatic interface similar
        to the Berkeley DB API. The architecture of Berkeley DB Java Edition
        supports high performance and concurrency for both read-intensive and
        write-intensive workloads.
        </p>

        <p>
        Berkeley DB Java Edition is different from all other Java databases
        available today. Berkeley DB Java Edition is not a relational engine built
        in Java. It is a Berkeley DB-style embedded store, with an interface
        designed for programmers, not DBAs. The architecture is based on a
        log-based, no-overwrite storage system, enabling high concurrency and
        speed while providing ACID transactions and record-level locking. Berkeley
        DB Java Edition efficiently caches most commonly used data in memory,
        without exceeding application-specified limits. In this way Berkeley DB
        Java Edition works with an application to use available JVM resources
        while providing access to very large data sets.
        </p>

        <p>
        J2EE is a central part of many enterprise deployments of Java. Berkeley
        DB Java Edition fits into the J2EE architecture by implementing three key
        APIs within J2EE. At its core, Berkeley DB Java Edition is a transactional
        database. Within a J2EE application server, many different subsystems must
        coordinate and work together in a transactional manner. By implementing
        the Java Transaction API (JTA), Berkeley DB Java Edition functions as a
        managed transactional resource within the application server. Berkeley
        DB Java Edition also implements the J2EE Connector Architecture (JCA) to
        ease integration into application servers. Finally, once integrated and
        performing transactional operations, most applications will require some
        ability to manage a service. Berkeley DB Java Edition exports information
        and services using the Java Management Extensions (JMX). In concert JTA,
        JCA and JMX allow Berkeley DB Java Edition to operate to its fullest
        and in a predictable manner in J2EE-based solutions.
        </p>

        <p>
        Berkeley DB Java Edition provides robust storage services for any Java
        application requiring high performance, transactional integrity and
        recoverability.
        </p>

        </description>
    </info>

    <publications>
        <artifact/>
        <artifact name="source" type="source" ext="zip"/>
        <artifact name="javadoc" type="javadoc" ext="zip"/>
    </publications>

</ivy-module>
